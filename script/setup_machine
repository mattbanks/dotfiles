#!/bin/sh
#
# Welcome to Matt's laptop script, forked from thoughbot!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

set -e

# Make sure we have Xcode command line tools
xcode-select --install

# Fancy echo for scripts
fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

# Create ~/.bin if it doesn't exist
if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

# Create ~/Code if it doesn't exist
if [ ! -d "$HOME/Code/" ]; then
  mkdir "$HOME/Code"
fi

# Create /usr/local if it doesn't exist,
# or update the permissions so we own it
HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

# Update shell to zsh
update_shell() {
  local shell_path;
  shell_path="$(which zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  chsh -s "$shell_path"
}

case "$SHELL" in
  */zsh)
    if [ "$(which zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

# Setup SSH public key if it doesn't exist
fancy_echo "Checking for SSH key, generating one if it doesn't exist ..."
  [[ -f ~/.ssh/id_rsa.pub ]] || ssh-keygen -t rsa

# Install homebrew
$ZSH/homebrew/install.sh

# Run Homebrew through the Brewfile
fancy_echo "â€º brew bundle ..."
brew bundle

# Install latest ruby with rbenv
gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

fancy_echo "Configuring Ruby ..."
find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

ruby_version="$(find_latest_ruby)"
# shellcheck disable=SC2016
eval "$(rbenv init -)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"
rbenv shell "$ruby_version"
gem update --system
gem_install_or_update 'bundler'
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

# Install npm packages
$ZSH/node/install.sh

# Setup Atom
$ZSH/bin/atom-package-install

# Setup Sublime Text 3
$ZSH/sublime3/setup

# Setup Visual Studio Code
$ZSH/vscode/setup
$ZSH/bin/vscode-extensions-install

# Setup Xcode color theme
$ZSH/xcode/setup

# Setup macOS defaults
$ZSH/macos/set-defaults.sh

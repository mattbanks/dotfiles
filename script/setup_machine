#!/bin/sh
#
# setup_machine
#
# `setup_machine` handles setting up a new machine
cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

set -e

# Make sure we have Xcode command line tools
XCODE_INSTALLED="xcode-select -p 1>/dev/null;echo $?"
if [ ! XCODE_INSTALLED == "0" ]; then
	xcode-select --install
fi

# Create ~/.bin if it doesn't exist
if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

# Create ~/Code if it doesn't exist
if [ ! -d "$HOME/Code/" ]; then
  mkdir "$HOME/Code"
fi

# Setup SSH public key if it doesn't exist
echo "› Checking for SSH key, generating one if it doesn't exist ..."
  [[ -f ~/.ssh/id_rsa.pub ]] || ssh-keygen -t rsa

# Create /usr/local if it doesn't exist,
# or update the permissions so we own it
HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

# Install homebrew
echo "› $DOTFILES/homebrew/setup"
"$DOTFILES_ROOT/homebrew/setup.sh"

# Run Homebrew through the Brewfile
echo "› brew bundle ..."
brew bundle

# Install latest ruby with rbenv
gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

echo "› Configuring Ruby ..."
find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

ruby_version="$(find_latest_ruby)"
# shellcheck disable=SC2016
eval "$(rbenv init -)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"
rbenv shell "$ruby_version"
gem update --system
gem_install_or_update 'bundler'
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

# Install npm packages
echo "› Configuring Node and NPM ..."
"$DOTFILES_ROOT/node/setup.sh"

# Run all installs
echo "› Running all installs"
"$DOTFILES_ROOT/script/install"

# Setup macOS defaults
echo "› Setting macOS defaults ..."
"$DOTFILES_ROOT/macos/set-defaults.sh"
